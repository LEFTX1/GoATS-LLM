services:
  # ──────────────────── Apache Tika ────────────────────
  tika:
    image: apache/tika:latest
    container_name: tika
    restart: unless-stopped
    ports:
      - "9998:9998"  # server_url: http://tika:9998
    networks:
      - agent-net

  # ──────────────────── Qdrant ─────────────────────────
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"  # endpoint: http://qdrant:6333
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - agent-net

  # ──────────────────── RabbitMQ (含管理界面) ───────────
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # 管理 UI
    volumes:
      - D:/docker_data/agent/rabbitmq:/var/lib/rabbitmq
    networks:
      - agent-net

  # ──────────────────── MinIO ──────────────────────────
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"  # endpoint: http://minio:9000
      - "9001:9001"  # Console
    volumes:
      - D:/docker_data/agent/minio:/data
    networks:
      - agent-net

  # ──────────────────── Redis ──────────────────────────
  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"  # address: redis:6379
    volumes:
      - D:/docker_data/agent/redis:/data
    networks:
      - agent-net

  # ──────────────────── MySQL 8 ─────────────────────────
  mysql:
    image: mysql:8.4
    container_name: mysql8
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: llm_ats
      TZ: Asia/Shanghai
    ports:
      - "3308:3306"  # host: mysql, port: 3306
    volumes:
      - D:/docker_data/agent/mysql8:/var/lib/mysql
    networks:
      - agent-net

  # ──────────────────── 可观测性套件 (Grafana + Tempo + Loki) ───────────────────
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000" # Grafana UI 端口
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_provisioning:/etc/grafana/provisioning
    networks:
      - agent-net
    depends_on:
      - tempo
      - loki

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    restart: unless-stopped
    volumes:
      - ./tempo-config.yaml:/etc/tempo.yaml
    ports:
      - "4317:4317" # OTLP gRPC
      - "3200:3200" # Tempo UI
    networks:
      - agent-net

  loki:
    image: grafana/loki:latest
    container_name: loki
    command: ["-config.file=/etc/loki/config.yaml"]
    restart: unless-stopped
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
      # 使用 Docker 命名卷，存储在 WSL2 VM 的 ext4 文件系统
      - loki_data:/loki
    ports:
      - "3100:3100" # Loki API
    networks:
      - agent-net

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    command: ["-config.file=/etc/promtail/config.yaml"]
    restart: unless-stopped
    volumes:
      - ./promtail-config.yaml:/etc/promtail/config.yaml
      - ./logs:/logs # 关键：将宿主机的 ./logs 目录映射到容器内
    networks:
      - agent-net
    depends_on:
      - loki

  # ──────────────────── Reranker Service (Python) ────────────────────
  reranker-service:
    build:
      context: ./reranker-service
      dockerfile: Dockerfile
    container_name: reranker_service
    restart: unless-stopped
    ports:
      - "8000:8000" # 将容器的8000端口映射到主机的8000端口，便于调试
    environment:
      # 从.env文件中读取API Key
      - DASHSCOPE_API_KEY=${DASHSCOPE_API_KEY}
    networks:
      - agent-net

networks:
  agent-net:
    external: false
    name: agent-net

volumes:
  # Loki 专用命名卷
  loki_data:
  # Grafana 专用命名卷
  grafana_data:
  grafana_provisioning:
  qdrant_data:
